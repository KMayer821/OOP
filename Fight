using System;

namespace ConsoleApp4
{ 
    internal class Program
    {
        static void Main(string[] args)
        {
            Fight fight = new Fight();
        }
    }

    abstract class Fighter
    {
        protected int AvoidChance = 0;
        protected int MaxChance = 100;
        public string Name { get; protected set; }
        public int Damage { get; protected set; }
        public int Health { get; protected set; }
        
        public virtual void TakeDamage(int damage)
        {
            Health -= damage;
        }

        public bool IsAlife()
        {
            if (Health < 0)
            {
                Health = 0;
                return false;
            }
            else if(Health == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        protected bool IsChanceWorked(int chance)
        {
            Random random = new Random();
            int currentLuckValue = random.Next(MaxChance);
            if (currentLuckValue < chance)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
    }

    class Warrior : Fighter
    {
        private int _battleRoarChance = 50;
        
        public Warrior()
        {
            Name = "WAR";
            Health = 100;
            Damage = 15;
        }

        public override void TakeDamage(int damage)
        {
            bool isRoarActivate = IsChanceWorked(_battleRoarChance);
            base.TakeDamage(damage);

            if (isRoarActivate == true)
            {
                BattleRoar();
            }
        }

        private void BattleRoar()
        {
            int damageMultiplier = 2;
            Damage *= damageMultiplier;
        }
    }

    class Barbarian : Fighter
    {
        public Barbarian()
        {
            Name = "BAR";
            Health = 70;
            Damage = 23;
        }
    }
    class Paladin : Fighter
    {
        private int _heal = 4;

        public Paladin()
        {
            Name = "PAL";
            Health = 120;
            Damage = 14;
        }

        public override void TakeDamage(int damage)
        {
            Health += _heal;
            Health -= damage;
        }
    }
    class Rogue : Fighter
    {
        public Rogue()
        {
            Name = "ROG";
            Health = 40;
            Damage = 30;
            AvoidChance = 25;
        }

        public override void TakeDamage(int damage)
        {
            bool isAvoided = IsChanceWorked(AvoidChance);

            if (isAvoided == false)
            {
                Health -= damage;
            }
        }

        
    }

    class Cleric : Fighter
    {
        private bool _isLastChanceActivate = false;

        public Cleric()
        {
            Name = "CLE";
            Health = 150;
            Damage = 10;
        }

        public override void TakeDamage(int damage)
        {
            Health -= damage;
            LastChance();
        }

        public void LastChance()
        {
            int extraHealth = 50;

            if (Health <= 0 && _isLastChanceActivate == false)
            {
                Health += extraHealth;
                _isLastChanceActivate = true;
            }
        }
    }

    class Fight
    {
        private string _userInput;
        private Fighter _firstFighter = null;
        private Fighter _secondFighter = null;

        public Fight()
        {
            int fightMuilisecTimer = 300;
            Console.WriteLine("Choose first character: ");
            _firstFighter = ChooseCharacter();
            Console.WriteLine("Choose second character: ");
            _secondFighter = ChooseCharacter();
            Console.WriteLine(_firstFighter.Name + "      " + _secondFighter.Name);

            while(_firstFighter.IsAlife() && _secondFighter.IsAlife())
            {
                Console.WriteLine(_firstFighter.Health + " ----- " + _secondFighter.Health);
                CunductRound();
                Thread.Sleep(fightMuilisecTimer);
            }
            ShowFightResult();
        }

        public void CunductRound()
        {
            _secondFighter.TakeDamage(_firstFighter.Damage);
            _firstFighter.TakeDamage(_secondFighter.Damage);
        }


        public Fighter ChooseCharacter()
        {
            List<string> caractersCharId = new List<string>();
            caractersCharId.Add("C");
            caractersCharId.Add("R");
            caractersCharId.Add("P");
            caractersCharId.Add("B");
            caractersCharId.Add("W");
            Fighter fighter = null;
            Console.WriteLine("C - cleric\nR - rogue\nP - paladin\nB - barbarian\nW - warrior");
            _userInput = Console.ReadLine();

            while (fighter == null)
            {
                if (caractersCharId.All(s => _userInput != s))
                {
                    Console.WriteLine("Wrong input!");
                    _userInput = Console.ReadLine();
                }
                else if (_userInput == caractersCharId[0])
                {
                    fighter = new Cleric();
                }
                else if (_userInput == caractersCharId[1])
                {
                    fighter = new Rogue();
                }
                else if (_userInput == caractersCharId[2])
                {
                    fighter = new Paladin();
                }
                else if (_userInput == caractersCharId[3])
                {
                    fighter = new Barbarian();
                }
                else if (_userInput == caractersCharId[4])
                {
                    fighter = new Warrior();
                }
            }
            return fighter;
        }

        public void ShowFightResult()
        {
            if (_secondFighter.IsAlife())
            {
                Console.WriteLine(_secondFighter.Name + " won!"); 
            }
            else
            {
                Console.WriteLine(_firstFighter.Name + " won!");
            }
            Console.WriteLine(_firstFighter.Health + " ----- " + _secondFighter.Health);
        }
    }
}
