using System;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            UserDataBase userData = new UserDataBase();
            userData.GetInterface();
        }
    }

    class UserDataBase 
    {
        private string _stopWord = "exit";
        private string _addWord = "add";
        private string _removeWord = "rem";
        private string _banWord = "ban";
        private string _unbanWord = "unban";
        private string _showWord = "show";
        private string _userInput = "";
        private int _id;
        User user = new User("virtual", 1);
        private List<User> _users = new List<User>();

        public void GetInterface()
        {
            Console.WriteLine("Commands: exit, add, rem, ban, show, unban");

            while (_userInput != _stopWord)
            {
                _userInput = Console.ReadLine();

                if (_userInput == _addWord)
                {
                    AddUser();
                }
                else if (_userInput == _removeWord)
                {
                    RemoveUser();
                }
                else if (_userInput == _showWord)
                {
                    Show();
                }
                else if (_userInput == _banWord)
                {
                    BanUser();
                }
                else if (_userInput == _unbanWord)
                {
                    UnbanUser();
                }
            }
        }

        public bool TryGetUser()
        {
            Console.WriteLine("id..");
            _userInput = Console.ReadLine();

            if (int.TryParse(_userInput, out _id) && (_id < _users.Count && _id >= 0))
            {
                return true;
            }
            else
            {
                return false;
                Console.WriteLine("Error");
            }
        }

        public void AddUser()
        {
            Console.WriteLine("name = ...");
            string name = Console.ReadLine();
            Console.WriteLine("level = ...");
            int level = 1;
            _userInput = Console.ReadLine();

            if (int.TryParse(_userInput,out level) == false)
            {
                Console.WriteLine("Error");
            }
            else
            { 
            User player = new User(name, level);
            _users.Add(player);
            }
        }

        public void RemoveUser()
        {
            if (TryGetUser() == true)
            {
                _users.RemoveAt(_id);
            }
            else
            {
                Console.Write("Error\n");
            }
        }

        private void BanUser()
        {
            if (TryGetUser() == true)
            {
                _users[_id].Ban();
            }
            else
            {
                Console.Write("Error\n");
            }
        }
        private void UnbanUser()
        {
            if (TryGetUser() == true)
            {
                _users[_id].Unban();
            }
            else
            {
                Console.Write("Error\n");
            }
        }

        private void Show()
        {
            for (int i = 0; i < _users.Count; i++)
            {
                Console.WriteLine(_users[i].Name + " whith level:" + _users[i].Level + " and ban status: " + _users[i].Banned);
            }
        }
    }

    class User
    {
        public bool Banned { get; private set; }
        public int Level { get; private set; }
        public string Name { get; private set; }

        public User(string name, int level, bool banned = false)
        {
            this.Name = name;
            this.Level = level;
            this.Banned = banned;
        }

        public void Ban()
        {
            Banned = true;
        }

        public void Unban()
        {
            Banned = false;  
        }
    }
}


/*
 Реализовать базу данных игроков и методы для работы с ней.
У игрока может быть уникальный номер, ник, уровень, флаг – забанен ли он(флаг - bool).
Реализовать возможность добавления игрока, бана игрока по уникальный номеру, разбана игрока по уникальный номеру и удаление игрока.
Создание самой БД не требуется, задание выполняется инструментами, которые вы уже изучили в рамках курса. Но нужен класс, который содержит игроков и её можно назвать "База данных".
*/
